var restaurantCuisines,restaurantNeighborhoods,allRestaurants;"undefined"==typeof idb&&self.importScripts("js/idb.js");const dbVERSION=1,dbNAME="restaurant_reviews",dbRestaurantOBJECTSTORE="restaurants",dbReviewsOBJECTSTORE="reviews",PORT=1337;class DBHelper{static get DATABASE_URL(){return`http://localhost:${PORT}/restaurants`}static get DATABASE_REVIEWS_URL(){return`http://localhost:${PORT}/reviews/?restaurant_id=`}static openIDB(){return navigator.serviceWorker?(self.indexedDB||reject("Uh oh, IndexedDB is NOT supported in this browser!"),idb.open(dbNAME,dbVERSION,function(e){switch(dbVERSION){case 0:case 1:e.createObjectStore(dbRestaurantOBJECTSTORE,{keyPath:"id"}).createIndex("restID","id");case 2:e.createObjectStore(dbReviewsOBJECTSTORE,{keyPath:"id"}).createIndex("reviewID","id")}})):Promise.resolve()}static storeAllInIDB(e){return DBHelper.openIDB().then(function(t){if(t){var r=t.transaction(dbRestaurantOBJECTSTORE,"readwrite"),a=r.objectStore(dbRestaurantOBJECTSTORE);return e.forEach(function(e){a.put(e)}),r.complete}})}static getFromAPIsaveToIDB(){return fetch(DBHelper.DATABASE_URL).then(function(e){return e.json()}).then(e=>(DBHelper.storeAllInIDB(e),e))}static getAllFromIDB(){return DBHelper.openIDB().then(function(e){if(e)return e.transaction(dbRestaurantOBJECTSTORE).objectStore(dbRestaurantOBJECTSTORE).getAll()})}static getNeighborhoodsCuisinesSelect(e){const t=e.map((t,r)=>e[r].neighborhood);restaurantNeighborhoods=t.filter((e,r)=>t.indexOf(e)==r);const r=e.map((t,r)=>e[r].cuisine_type);restaurantCuisines=r.filter((e,t)=>r.indexOf(e)==t),allRestaurants=e}static fetchRestaurants(e){return DBHelper.getAllFromIDB().then(e=>e.length?Promise.resolve(e):DBHelper.getFromAPIsaveToIDB()).then(t=>{DBHelper.getNeighborhoodsCuisinesSelect(t),e(null,t)}).catch(t=>{e(t,null)})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.find(t=>t.id==e);r?t(null,r):t(`Restaurant with ID=${e} does not exist`,null)}})}static getRestaurantReviewsById(e,t){let r=DBHelper.DATABASE_REVIEWS_URL+e;fetch(r).then(e=>{e.ok||console.log(`Problem retrieving reviews: ${e.statusText}`),e.json().then(e=>{t(null,e)})}).catch(e=>t(e,null))}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((a,s)=>{if(a)r(a,null);else{let a=s;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),r(null,a)}})}static fetchNeighborhoods(e){restaurantNeighborhoods?e(null,restaurantNeighborhoods):DBHelper.fetchRestaurants((t,r)=>{t?e(t,null):e(null,restaurantNeighborhoods)})}static fetchCuisines(e){restaurantCuisines?e(null,restaurantCuisines):DBHelper.fetchRestaurants((t,r)=>{t?e(t,null):e(null,restaurantCuisines)})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/img/${e.photograph}.jpg`:"/img/default-annie-spratt.jpg"}static updateIsFavorite(e,t){DBHelper.openIDB().then(function(r){let a=r.transaction(dbRestaurantOBJECTSTORE,"readwrite").objectStore(dbRestaurantOBJECTSTORE);a.get(e).then(e=>{e.is_favorite=Boolean(t),a.put(e)})}),DBHelper.updateIsFavoriteAPI(e,Boolean(t))}static updateIsFavoriteAPI(e,t){let r=`${DBHelper.DATABASE_URL}/${e}/?is_favorite=${t}`;return console.log(`updateIsFavoriteAPI: pre-fetch: ${r}`),new Promise(function(a,s){fetch(r,{method:"PUT"}).then(()=>{console.log(`updateIsFavoriteAPI: PUT: restaurantID: ${e} : is_favorite: ${t}`),a(!0)}).catch(r=>{console.log(` PUT: restaurantID: ${e} : is_favorite: ${t} \n Fetch Error: ${r}`),s(!1)})})}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(newMap),r}}self.DBHelper=DBHelper;